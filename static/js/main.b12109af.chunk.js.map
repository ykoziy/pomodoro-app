{"version":3,"sources":["containers/Timer.js","containers/Controls.js","actions/index.js","constants/ActionTypes.js","containers/withSessionType.js","containers/BreakPane.js","containers/SessionPane.js","components/App.js","serviceWorker.js","index.js","reducers/index.js"],"names":["connect","state","time","startTime","type","currentState","sessionType","offset","toFixed","className","id","r","cx","cy","style","strokeDashoffset","x","y","width","height","seconds","min","Math","floor","sec","getTime","charAt","toUpperCase","slice","Controls","props","countDown","switchType","tickTime","audio","currentTime","play","handleClick","switchState","setIntervalID","intervalID","clearInterval","undefined","setInterval","handleResetClick","pressReset","pause","bind","this","children","onClick","ref","preload","src","Component","dispatch","withSessionType","WrappedComponent","HocComponent","onClickAdjust","event","currId","currentTarget","currentSessionAdjust","timeDuration","includes","adjustTimeDuration","onInput","target","value","max","Number","sessionTypeText","size","onChange","breakLen","adjustBreakLength","sessionLen","adjustSessionLength","App","Fragment","Boolean","window","location","hostname","match","initialState","store","createStore","action","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b12109af.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from 'react-redux';\r\n\r\nconst Timer = ({ time,  startTime, type, currentState, sessionType}) => {\r\n  const percent = time/startTime;\r\n  let offset = 564.573 * (1 - percent.toFixed(3));\r\n\r\n  const getTime = (seconds) => {\r\n    let min = Math.floor(seconds/60);\r\n    let sec = seconds % 60;\r\n    return (min < 10 ? `0${min}` : `${min}`) + \":\" + (sec < 10 ? `0${sec}` : `${sec}`);\r\n  }\r\n\r\n  return (\r\n      <div className=\"timer-container\">\r\n          <div id=\"timer-label\">{type}</div>\r\n        <svg className=\"progress-ring\">\r\n          <g className=\"circle\">\r\n              <circle className=\"lower-layer\" r=\"90\" cx=\"100\" cy=\"100\"/>\r\n              <circle className=\"progress-bar shadow\" r=\"90\" cx=\"100\" cy=\"100\" style = {{strokeDashoffset: `${offset}`}}/>\r\n          </g>\r\n          <foreignObject className=\"text\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n              <div id=\"time-left\">{getTime(time)}</div>\r\n          </foreignObject>\r\n          <foreignObject className=\"text\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n              <div id=\"session-label\">{sessionType.charAt(0).toUpperCase() + sessionType.slice(1)}</div>\r\n          </foreignObject>\r\n        </svg>\r\n      </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    time: state.time,\r\n    startTime: state.startTime,\r\n    type: state.type,\r\n    currentState: state.currentState,\r\n    sessionType: state.sessionType\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(Timer);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { switchState, pressReset, setIntervalID, switchType, tickTime } from '../actions';\r\n\r\nclass Controls extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleResetClick = this.handleResetClick.bind(this);\r\n  }\r\n\r\n  countDown = () => {\r\n    const {time, sessionType, switchType, tickTime} = this.props;\r\n    if (time === 0) {\r\n      this.audio.currentTime= 0;\r\n      this.audio.play();\r\n      switchType(sessionType);\r\n    } else {\r\n      tickTime();\r\n    }\r\n  }\r\n\r\n  handleClick = () => {\r\n    const {currentState, switchState, setIntervalID, intervalID} = this.props;\r\n    if (currentState === \"run\") {\r\n      switchState(\"stop\");\r\n      clearInterval(intervalID);\r\n      setIntervalID(undefined);\r\n    } else {\r\n      switchState(\"run\");\r\n      let timer = setInterval(this.countDown, 1000);\r\n      setIntervalID(timer);\r\n    }\r\n  }\r\n\r\n  handleResetClick = () => {\r\n    const {pressReset, intervalID} = this.props;\r\n    this.audio.pause();\r\n    this.audio.currentTime = 0;\r\n    clearInterval(intervalID);\r\n    pressReset();\r\n  }\r\n\r\n  render() {\r\n    const {children, currentState} = this.props;\r\n    return (\r\n        <div className=\"controls-container\">\r\n            {children}\r\n            <div className=\"button-controls\">\r\n                {currentState === \"stop\" && <button id=\"start_stop\" onClick={this.handleClick}>START</button>}\r\n                {currentState === \"run\" && <button id=\"start_stop\" className=\"active\" onClick={this.handleClick}>STOP</button>}\r\n                <button id=\"reset\" onClick={this.handleResetClick}>RESET</button>\r\n            </div>\r\n            <audio id=\"beep\" ref={audio => this.audio = audio} preload=\"auto\" src=\"https://sampleswap.org/samples-ghost/SOUND%20EFFECTS%20and%20NOISES/Alarm%20Sounds/137[kb]alarm-synth-verb-hit.wav.mp3\" />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    currentState: state.currentState,\r\n    sessionType: state.sessionType,\r\n    intervalID: state.intervalID,\r\n    time: state.time\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  switchState: (state) => dispatch(switchState(state)),\r\n  pressReset: () => dispatch(pressReset()),\r\n  setIntervalID: (intervalID) => dispatch(setIntervalID(intervalID)),\r\n  switchType: (sessionType) => dispatch(switchType(sessionType)),\r\n  tickTime: () => dispatch(tickTime())\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Controls);\r\n","import {\r\n  ADJUST_BREAK_LENGTH,\r\n  ADJUST_SESSION_LENGTH,\r\n  SWITCH_STATE,\r\n  PRESS_RESET,\r\n  SET_INTERVAL_ID,\r\n  SWITCH_TYPE,\r\n  TICK_TIME\r\n} from \"../constants/ActionTypes\";\r\n\r\nexport const switchState = (currentState) => ({type: SWITCH_STATE, currentState});\r\n\r\nexport const switchType = (sessionType) => ({type: SWITCH_TYPE, sessionType});\r\n\r\nexport const pressReset = () => ({type: PRESS_RESET});\r\n\r\nexport const tickTime = () => ({type: TICK_TIME});\r\n\r\nexport const adjustBreakLength = (breakLen) => (\r\n  {type: ADJUST_BREAK_LENGTH, breakLen}\r\n);\r\n\r\nexport const adjustSessionLength = (sessionLen) => (\r\n  {type: ADJUST_SESSION_LENGTH, sessionLen}\r\n);\r\n\r\nexport const setIntervalID = (intervalID) => (\r\n  {type: SET_INTERVAL_ID, intervalID}\r\n)\r\n","export const ADJUST_BREAK_LENGTH = 'ADJUST_BREAK_LENGTH';\r\nexport const ADJUST_SESSION_LENGTH = 'ADJUST_SESSION_LENGTH';\r\nexport const SWITCH_STATE = 'SWITCH_STATE';\r\nexport const PRESS_RESET = 'PRESS_RESET';\r\nexport const SET_INTERVAL_ID = 'SET_INTERVAL_ID';\r\n\r\nexport const SWITCH_TYPE = 'SWITCH_TYPE';\r\nexport const TICK_TIME = 'TICK_TIME';\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction withSessionType(WrappedComponent, sessionType) {\r\n  class HocComponent extends Component {\r\n\r\n    onClickAdjust = (event) => {\r\n      if(this.props.currentState === \"run\" && (this.props.sessionType === sessionType)) {\r\n          return;\r\n      }\r\n      const currId = event.currentTarget.id;\r\n      let currentSessionAdjust = this.props.timeDuration;\r\n      if(currId.includes(\"increment\") && (currentSessionAdjust < 60)) {\r\n          currentSessionAdjust += 1;\r\n      } else if(currId.includes(\"decrement\") && (currentSessionAdjust > 1)){\r\n          currentSessionAdjust -= 1;\r\n      }\r\n      this.props.adjustTimeDuration(currentSessionAdjust);\r\n    }\r\n\r\n    onInput = (event) => {\r\n      let { value, min, max } = event.target;\r\n      value = Math.max(Number(min), Math.min(Number(max), Number(value)));\r\n      this.props.adjustTimeDuration(value);\r\n    }\r\n\r\n    render() {\r\n      const { timeDuration } = this.props;\r\n      const sessionTypeText = sessionType.charAt(0).toUpperCase() + sessionType.slice(1)\r\n      return(\r\n          <div className={`${sessionType}-pane`}>\r\n              <div id={`${sessionType}-label`}>{sessionTypeText} Length</div>\r\n              <div className=\"adjust\">\r\n                <button id={`${sessionType}-decrement`} onClick={this.onClickAdjust}>-</button>\r\n                <input id={`${sessionType}-length`} type=\"number\" size=\"2\" min=\"1\" max=\"60\" value={timeDuration} onChange={this.onInput}/>\r\n                <button id={`${sessionType}-increment`} onClick={this.onClickAdjust}>+</button>\r\n              </div>\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  const mapStateToProps = (state) => ({\r\n      currentState: state.currentState,\r\n      sessionType: state.sessionType\r\n  });\r\n\r\n  return connect(\r\n      mapStateToProps\r\n  )(HocComponent);\r\n}\r\n\r\nexport default withSessionType;\r\n","import { connect } from 'react-redux';\r\nimport { adjustBreakLength } from '../actions';\r\nimport withSessionType from './withSessionType';\r\n\r\nconst BreakPane = () => {}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    timeDuration: state.breakLen\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  adjustTimeDuration: (breakLen) => dispatch(adjustBreakLength(breakLen))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withSessionType(BreakPane, \"break\"));\r\n","import { connect } from 'react-redux';\r\nimport { adjustSessionLength } from '../actions';\r\nimport withSessionType from './withSessionType';\r\n\r\nconst SessionPane = ({sessionLen, adjustSessionLength}) => {}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    timeDuration: state.sessionLen\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  adjustTimeDuration: (sessionLen) => dispatch(adjustSessionLength(sessionLen))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withSessionType(SessionPane, \"session\"));\r\n","import React from \"react\";\nimport './App.scss';\n\nimport Timer from \"../containers/Timer.js\";\nimport Controls from \"../containers/Controls.js\";\nimport BreakPane from \"../containers/BreakPane.js\";\nimport SessionPane from \"../containers/SessionPane.js\";\n\nconst App = () => (\n  <React.Fragment>\n    <h1>Pomodoro Clock</h1>\n    <div className=\"pomodoro-clock\">\n      <Timer />\n      <Controls>\n        <BreakPane />\n        <SessionPane />\n      </Controls>\n    </div>\n  </React.Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\n\nimport App from './components/App';\nimport rootReducer from './reducers';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst initialState = {\n  breakLen: 5,\n  sessionLen: 25,\n  time: 1500,\n  startTime: 1500,\n  sessionType: \"session\",\n  currentState: \"stop\",\n  intervalID: undefined\n};\n\nconst store = createStore(rootReducer, initialState);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\r\n  ADJUST_BREAK_LENGTH,\r\n  ADJUST_SESSION_LENGTH,\r\n  SWITCH_STATE,\r\n  PRESS_RESET,\r\n  SET_INTERVAL_ID,\r\n  SWITCH_TYPE,\r\n  TICK_TIME\r\n} from \"../constants/ActionTypes\";\r\n\r\nexport default (state, action) => {\r\n  switch(action.type) {\r\n    case SWITCH_STATE:\r\n      return {...state, currentState: action.currentState};\r\n    case ADJUST_BREAK_LENGTH:\r\n      return {...state, breakLen: action.breakLen};\r\n    case SET_INTERVAL_ID:\r\n      return {...state, intervalID: action.intervalID}\r\n    case TICK_TIME:\r\n      return {...state, time: state.time - 1};\r\n    case ADJUST_SESSION_LENGTH:\r\n        return {...state, sessionLen: action.sessionLen,\r\n                time: action.sessionLen*60,\r\n                startTime: action.sessionLen*60\r\n              };\r\n    case SWITCH_TYPE:\r\n      if (action.sessionType === \"session\") {\r\n        return {...state, sessionType: \"break\", time: state.breakLen*60, startTime: state.breakLen*60}\r\n      } else {\r\n        return {...state, sessionType: \"session\", time: state.sessionLen*60, startTime: state.sessionLen*60}\r\n      }\r\n    case PRESS_RESET:\r\n      return { breakLen: 5,\r\n              sessionLen: 25,\r\n              time: 1500,\r\n              startTime: 1500,\r\n              sessionType: \"session\",\r\n              intervalID: undefined,\r\n              currentState: \"stop\"\r\n            };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"],"sourceRoot":""}